
QUTMS_HVBoard_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002578  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e0b  00000000  00000000  00002b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fb1  00000000  00000000  00003983  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000470  00000000  00000000  00004934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001091  00000000  00000000  00004da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015c7  00000000  00000000  00005e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000073fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	3d d0       	rcall	.+122    	; 0x124 <main>
  aa:	7a c1       	rjmp	.+756    	; 0x3a0 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <adc_init>:
    ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
}

void adc_set_prescalar(uint8_t prescalar) {
    //ADCSRA &= ADC_PRESCALAR_MASK;
    ADCSRA |= prescalar;
  ae:	aa e7       	ldi	r26, 0x7A	; 122
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	1c 92       	st	X, r1
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8f 7d       	andi	r24, 0xDF	; 223
  bc:	80 83       	st	Z, r24
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
  c4:	8c 91       	ld	r24, X
  c6:	87 68       	ori	r24, 0x87	; 135
  c8:	8c 93       	st	X, r24
  ca:	08 95       	ret

000000cc <adc_read>:
Returns :   result - pass the 10 bit ADC number to requesting function
Notes   :
============================================================================*/
uint16_t adc_read(uint8_t adc_channel) {
    uint16_t result = 0;
    adc_channel = (ADMUX & 0b11100000)|(adc_channel & 0b00011111);
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	90 7e       	andi	r25, 0xE0	; 224
  d4:	8f 71       	andi	r24, 0x1F	; 31
  d6:	89 2b       	or	r24, r25
    ADMUX = adc_channel;
  d8:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC);
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
    while(!(ADCSRA & (1 << ADIF)));
  e4:	80 81       	ld	r24, Z
  e6:	84 ff       	sbrs	r24, 4
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <adc_read+0x18>
    result = ADCL;
  ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    result |= ((0b00000011 & ADCH) << 0b00001000);
  ee:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    ADCSRA |= (1 << ADIF);
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	90 61       	ori	r25, 0x10	; 16
  fa:	90 83       	st	Z, r25
    return result;
  fc:	23 70       	andi	r18, 0x03	; 3
  fe:	90 e0       	ldi	r25, 0x00	; 0
}
 100:	92 2b       	or	r25, r18
 102:	08 95       	ret

00000104 <HV_board_init>:
Returns :   void
Notes   :
============================================================================*/
void HV_board_init() 
{
	DDRD = 0b11000010; // LEDs as outputs
 104:	82 ec       	ldi	r24, 0xC2	; 194
 106:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b10111000; // MOSI and SCK and CAN_CS as output, SS output
 108:	88 eb       	ldi	r24, 0xB8	; 184
 10a:	84 b9       	out	0x04, r24	; 4
	// Set IMD Status pin as input - High = no fault, Low = failure
	DDRA = 0b00000000;
 10c:	11 b8       	out	0x01, r1	; 1
	
	CAN_CS_PORT |= (1<<CAN_CS); // CS high to turn off
 10e:	2b 9a       	sbi	0x05, 3	; 5
	
	adc_init();
 110:	ce df       	rcall	.-100    	; 0xae <adc_init>
	uart0_init(9600);
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	95 e2       	ldi	r25, 0x25	; 37
 116:	28 d1       	rcall	.+592    	; 0x368 <uart0_init>
	spi_init(0,0); // 1,0
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	80 e0       	ldi	r24, 0x00	; 0
	MCP2517_init();
 11c:	07 d1       	rcall	.+526    	; 0x32c <spi_init>
 11e:	78 d0       	rcall	.+240    	; 0x210 <MCP2517_init>
	sei(); // Enable interrupts
 120:	78 94       	sei
 122:	08 95       	ret

00000124 <main>:
}

int main(void)
{
    HV_board_init();
 124:	ef df       	rcall	.-34     	; 0x104 <HV_board_init>
	
	HV_BOARD_DATA[0] = 0x00;
 126:	e0 e0       	ldi	r30, 0x00	; 0
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	10 82       	st	Z, r1
	HV_BOARD_DATA[1] = 0x01;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	81 83       	std	Z+1, r24	; 0x01
	HV_BOARD_DATA[2] = 0x02;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	82 83       	std	Z+2, r24	; 0x02
	HV_BOARD_DATA[3] = 0x03;
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	83 83       	std	Z+3, r24	; 0x03
	HV_BOARD_DATA[4] = 0x04;
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	84 83       	std	Z+4, r24	; 0x04
			} else {
			LED_A_OFF;
		}
		
		uint16_t lemMeasurement = adc_read(0x01);
		HV_BOARD_DATA[0] = lemMeasurement >> 8;
 13c:	ef 01       	movw	r28, r30
		HV_BOARD_DATA[1] = lemMeasurement;
		LED_A_TOGGLE;
 13e:	10 e4       	ldi	r17, 0x40	; 64
			//LED_A_OFF;
		//}
		//LED_B_ON;
		
		// Check whether the IMD Status pin is high or low (only after it's been plugged in/ running for min of 2s)
		if(BIT_VALUE(IMD_REG, IMD_STATUS) != 0) {
 140:	02 9b       	sbis	0x00, 2	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <main+0x24>
			LED_B_ON;
 144:	5f 9a       	sbi	0x0b, 7	; 11
 146:	01 c0       	rjmp	.+2      	; 0x14a <main+0x26>
		} else {
			LED_B_OFF;
 148:	5f 98       	cbi	0x0b, 7	; 11
		}
		
		// Check the HV_SENSE_ON pin, High - TSAL is off, Low - TSAL is on
		if(BIT_VALUE(HV_SENSE_REG, HV_SENSE_STATUS) == 0) {
 14a:	00 99       	sbic	0x00, 0	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <main+0x2e>
			LED_A_ON;
 14e:	5e 9a       	sbi	0x0b, 6	; 11
 150:	01 c0       	rjmp	.+2      	; 0x154 <main+0x30>
			} else {
			LED_A_OFF;
 152:	5e 98       	cbi	0x0b, 6	; 11
		}
		
		uint16_t lemMeasurement = adc_read(0x01);
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	ba df       	rcall	.-140    	; 0xcc <adc_read>
		HV_BOARD_DATA[0] = lemMeasurement >> 8;
 158:	98 83       	st	Y, r25
		HV_BOARD_DATA[1] = lemMeasurement;
 15a:	89 83       	std	Y+1, r24	; 0x01
		LED_A_TOGGLE;
 15c:	8b b1       	in	r24, 0x0b	; 11
 15e:	81 27       	eor	r24, r17
 160:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	83 ec       	ldi	r24, 0xC3	; 195
 166:	99 e0       	ldi	r25, 0x09	; 9
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x44>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x4e>
 172:	00 00       	nop
 174:	e5 cf       	rjmp	.-54     	; 0x140 <main+0x1c>

00000176 <MCP2517_assertCS>:
		const uint32_t readBackValue = MCP2517_readReg32(0x400);
		if (readBackValue != i) {
			uart0_transmit(MCP2517_RAM_ERROR); // Error code
		}
	}
}
 176:	2b 98       	cbi	0x05, 3	; 5
 178:	08 95       	ret

0000017a <MCP2517_deassertCS>:
 17a:	2b 9a       	sbi	0x05, 3	; 5
 17c:	08 95       	ret

0000017e <MCP2517_reset>:
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	00 d0       	rcall	.+0      	; 0x184 <MCP2517_reset+0x6>
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	1a 82       	std	Y+2, r1	; 0x02
 18a:	19 82       	std	Y+1, r1	; 0x01
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	89 83       	std	Y+1, r24	; 0x01
 190:	f2 df       	rcall	.-28     	; 0x176 <MCP2517_assertCS>
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	d0 d0       	rcall	.+416    	; 0x33a <spi_transfer_buffer>
 19a:	ef df       	rcall	.-34     	; 0x17a <MCP2517_deassertCS>
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <MCP2517_setMode>:
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <MCP2517_setMode+0x6>
 1ac:	1f 92       	push	r1
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	90 e2       	ldi	r25, 0x20	; 32
 1b4:	99 83       	std	Y+1, r25	; 0x01
 1b6:	93 e0       	ldi	r25, 0x03	; 3
 1b8:	9a 83       	std	Y+2, r25	; 0x02
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	8b 83       	std	Y+3, r24	; 0x03
 1be:	db df       	rcall	.-74     	; 0x176 <MCP2517_assertCS>
 1c0:	63 e0       	ldi	r22, 0x03	; 3
 1c2:	ce 01       	movw	r24, r28
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	b9 d0       	rcall	.+370    	; 0x33a <spi_transfer_buffer>
 1c8:	d8 df       	rcall	.-80     	; 0x17a <MCP2517_deassertCS>
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <MCP2517_getMode>:
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	00 d0       	rcall	.+0      	; 0x1dc <MCP2517_getMode+0x6>
 1dc:	1f 92       	push	r1
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	19 82       	std	Y+1, r1	; 0x01
 1e4:	1a 82       	std	Y+2, r1	; 0x02
 1e6:	1b 82       	std	Y+3, r1	; 0x03
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	8a 83       	std	Y+2, r24	; 0x02
 1f0:	c2 df       	rcall	.-124    	; 0x176 <MCP2517_assertCS>
 1f2:	63 e0       	ldi	r22, 0x03	; 3
 1f4:	ce 01       	movw	r24, r28
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	a0 d0       	rcall	.+320    	; 0x33a <spi_transfer_buffer>
 1fa:	bf df       	rcall	.-130    	; 0x17a <MCP2517_deassertCS>
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	82 95       	swap	r24
 200:	86 95       	lsr	r24
 202:	87 70       	andi	r24, 0x07	; 7
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <MCP2517_init>:

// Initalise the MCP2517 chip
void MCP2517_init() {
 210:	ff 92       	push	r15
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	00 d0       	rcall	.+0      	; 0x21c <MCP2517_init+0xc>
 21c:	00 d0       	rcall	.+0      	; 0x21e <MCP2517_init+0xe>
 21e:	00 d0       	rcall	.+0      	; 0x220 <MCP2517_init+0x10>
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
	//cli(); // Disable interrupts while configuring
	
	// Request configuration mode
	MCP2517_setMode(MCP2517_CONFIGURATION_MODE);
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	bf df       	rcall	.-130    	; 0x1a6 <MCP2517_setMode>
 228:	8f e3       	ldi	r24, 0x3F	; 63
 22a:	9f e1       	ldi	r25, 0x1F	; 31
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <MCP2517_init+0x1c>
 230:	00 c0       	rjmp	.+0      	; 0x232 <MCP2517_init+0x22>
	// Wait 2ms for chip to change modes
	_delay_ms(2);
	// Check that chip is now in config mode
	uint8_t mode = MCP2517_getMode();
 232:	00 00       	nop
 234:	d0 df       	rcall	.-96     	; 0x1d6 <MCP2517_getMode>
	if(mode != MCP2517_CONFIGURATION_MODE) {
 236:	84 30       	cpi	r24, 0x04	; 4
		//LED_A_ON;
		uart0_transmit(MCP2517_MODE_SELECT_ERROR);
 238:	11 f0       	breq	.+4      	; 0x23e <MCP2517_init+0x2e>
 23a:	83 e0       	ldi	r24, 0x03	; 3
	}
	//
	// Perform software reset
	MCP2517_reset();
 23c:	a9 d0       	rcall	.+338    	; 0x390 <uart0_transmit>
 23e:	9f df       	rcall	.-194    	; 0x17e <MCP2517_reset>
 240:	ef e3       	ldi	r30, 0x3F	; 63
 242:	ff e1       	ldi	r31, 0x1F	; 31
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <MCP2517_init+0x34>
 248:	00 c0       	rjmp	.+0      	; 0x24a <MCP2517_init+0x3a>
	// Let the chip change modes
	_delay_ms(2);
	// Check that chip has flipped
	mode = MCP2517_getMode();
 24a:	00 00       	nop
	if(mode != MCP2517_CONFIGURATION_MODE) {
 24c:	c4 df       	rcall	.-120    	; 0x1d6 <MCP2517_getMode>
 24e:	84 30       	cpi	r24, 0x04	; 4
		//LED_B_ON;
		uart0_transmit(MCP2517_MODE_SELECT_ERROR);
 250:	11 f0       	breq	.+4      	; 0x256 <MCP2517_init+0x46>
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	9d d0       	rcall	.+314    	; 0x390 <uart0_transmit>
	spi_transfer_buffer(buff, 3);
	MCP2517_deassertCS();
}

inline void MCP2517_writeReg32(const uint16_t regAddr, const uint32_t value) {
	uint8_t buff[6] = {0};
 256:	8e 01       	movw	r16, r28
 258:	0f 5f       	subi	r16, 0xFF	; 255
 25a:	1f 4f       	sbci	r17, 0xFF	; 255
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	f8 01       	movw	r30, r16
 260:	11 92       	st	Z+, r1
 262:	8a 95       	dec	r24
 264:	e9 f7       	brne	.-6      	; 0x260 <MCP2517_init+0x50>
	
	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 266:	68 94       	set
 268:	ff 24       	eor	r15, r15
 26a:	f5 f8       	bld	r15, 5
 26c:	f9 82       	std	Y+1, r15	; 0x01
	buff[1] = (uint8_t) (regAddr & 0xFF);
 26e:	84 e0       	ldi	r24, 0x04	; 4

// *****************************************************************************
// Helper Functions
// *****************************************************************************
inline void enterWordInBufferAtIndex (const uint32_t value, uint8_t buff[], const uint8_t index) {
	buff[index + 0] = (uint8_t) value;
 270:	8a 83       	std	Y+2, r24	; 0x02
 272:	8f e0       	ldi	r24, 0x0F	; 15
	buff[index + 1] = (uint8_t) (value >> 8);
	buff[index + 2] = (uint8_t) (value >> 16);
 274:	8b 83       	std	Y+3, r24	; 0x03
	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
	buff[1] = (uint8_t) (regAddr & 0xFF);
	
	enterWordInBufferAtIndex(value, buff, 2);
	
	MCP2517_assertCS();
 276:	8c 83       	std	Y+4, r24	; 0x04
 278:	8e e3       	ldi	r24, 0x3E	; 62
	spi_transfer_buffer(buff, 6);
 27a:	8d 83       	std	Y+5, r24	; 0x05
 27c:	7c df       	rcall	.-264    	; 0x176 <MCP2517_assertCS>
 27e:	66 e0       	ldi	r22, 0x06	; 6
	MCP2517_deassertCS();
 280:	c8 01       	movw	r24, r16
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
	buff[1] = (uint8_t) (regAddr & 0xFF);
 282:	5b d0       	rcall	.+182    	; 0x33a <spi_transfer_buffer>
 284:	7a df       	rcall	.-268    	; 0x17a <MCP2517_deassertCS>
	buff[2] = value;
 286:	f9 82       	std	Y+1, r15	; 0x01
 288:	8f e5       	ldi	r24, 0x5F	; 95
	
	MCP2517_assertCS();
 28a:	8a 83       	std	Y+2, r24	; 0x02
	spi_transfer_buffer(buff, 3);
 28c:	8f ee       	ldi	r24, 0xEF	; 239
 28e:	8b 83       	std	Y+3, r24	; 0x03
 290:	72 df       	rcall	.-284    	; 0x176 <MCP2517_assertCS>
	MCP2517_deassertCS();
 292:	63 e0       	ldi	r22, 0x03	; 3
 294:	c8 01       	movw	r24, r16
// SPI Write Functions
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 296:	51 d0       	rcall	.+162    	; 0x33a <spi_transfer_buffer>
	buff[1] = (uint8_t) (regAddr & 0xFF);
 298:	70 df       	rcall	.-288    	; 0x17a <MCP2517_deassertCS>
 29a:	f9 82       	std	Y+1, r15	; 0x01
	buff[2] = value;
 29c:	8c e5       	ldi	r24, 0x5C	; 92
	
	MCP2517_assertCS();
 29e:	8a 83       	std	Y+2, r24	; 0x02
	spi_transfer_buffer(buff, 3);
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	8b 83       	std	Y+3, r24	; 0x03
 2a4:	68 df       	rcall	.-304    	; 0x176 <MCP2517_assertCS>
	MCP2517_deassertCS();
 2a6:	63 e0       	ldi	r22, 0x03	; 3
 2a8:	c8 01       	movw	r24, r16
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
	buff[1] = (uint8_t) (regAddr & 0xFF);
 2aa:	47 d0       	rcall	.+142    	; 0x33a <spi_transfer_buffer>
 2ac:	66 df       	rcall	.-308    	; 0x17a <MCP2517_deassertCS>
	buff[2] = value;
 2ae:	f9 82       	std	Y+1, r15	; 0x01
	
	MCP2517_assertCS();
 2b0:	8e e5       	ldi	r24, 0x5E	; 94
 2b2:	8a 83       	std	Y+2, r24	; 0x02
	spi_transfer_buffer(buff, 3);
 2b4:	80 e6       	ldi	r24, 0x60	; 96
 2b6:	8b 83       	std	Y+3, r24	; 0x03
 2b8:	5e df       	rcall	.-324    	; 0x176 <MCP2517_assertCS>
 2ba:	63 e0       	ldi	r22, 0x03	; 3
	MCP2517_deassertCS();
 2bc:	c8 01       	movw	r24, r16
// SPI Write Functions
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 2be:	3d d0       	rcall	.+122    	; 0x33a <spi_transfer_buffer>
	buff[1] = (uint8_t) (regAddr & 0xFF);
 2c0:	5c df       	rcall	.-328    	; 0x17a <MCP2517_deassertCS>
	buff[2] = value;
 2c2:	f9 82       	std	Y+1, r15	; 0x01
 2c4:	8b e6       	ldi	r24, 0x6B	; 107
	
	MCP2517_assertCS();
 2c6:	8a 83       	std	Y+2, r24	; 0x02
 2c8:	83 e0       	ldi	r24, 0x03	; 3
	spi_transfer_buffer(buff, 3);
 2ca:	8b 83       	std	Y+3, r24	; 0x03
 2cc:	54 df       	rcall	.-344    	; 0x176 <MCP2517_assertCS>
 2ce:	63 e0       	ldi	r22, 0x03	; 3
	MCP2517_deassertCS();
 2d0:	c8 01       	movw	r24, r16
// SPI Write Functions
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 2d2:	33 d0       	rcall	.+102    	; 0x33a <spi_transfer_buffer>
	buff[1] = (uint8_t) (regAddr & 0xFF);
 2d4:	52 df       	rcall	.-348    	; 0x17a <MCP2517_deassertCS>
	buff[2] = value;
 2d6:	81 e2       	ldi	r24, 0x21	; 33
 2d8:	89 83       	std	Y+1, r24	; 0x01
	
	MCP2517_assertCS();
 2da:	80 ed       	ldi	r24, 0xD0	; 208
 2dc:	8a 83       	std	Y+2, r24	; 0x02
	spi_transfer_buffer(buff, 3);
 2de:	82 e8       	ldi	r24, 0x82	; 130
 2e0:	8b 83       	std	Y+3, r24	; 0x03
 2e2:	49 df       	rcall	.-366    	; 0x176 <MCP2517_assertCS>
	MCP2517_deassertCS();
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	c8 01       	movw	r24, r16
// SPI Write Functions
// *****************************************************************************
inline void MCP2517_writeReg8(const uint16_t regAddr, const uint8_t value) {
	uint8_t buff[3] = {0};

	buff[0] = (uint8_t) ((MCP2517_INSTRUCTION_WRITE << 4) + ((regAddr >> 8) & 0xF));
 2e8:	28 d0       	rcall	.+80     	; 0x33a <spi_transfer_buffer>
 2ea:	47 df       	rcall	.-370    	; 0x17a <MCP2517_deassertCS>
	buff[1] = (uint8_t) (regAddr & 0xFF);
 2ec:	8e e2       	ldi	r24, 0x2E	; 46
 2ee:	89 83       	std	Y+1, r24	; 0x01
	buff[2] = value;
 2f0:	8c e0       	ldi	r24, 0x0C	; 12
 2f2:	8a 83       	std	Y+2, r24	; 0x02
	
	MCP2517_assertCS();
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	8b 83       	std	Y+3, r24	; 0x03
	spi_transfer_buffer(buff, 3);
 2f8:	3e df       	rcall	.-388    	; 0x176 <MCP2517_assertCS>
 2fa:	63 e0       	ldi	r22, 0x03	; 3
 2fc:	c8 01       	movw	r24, r16
 2fe:	1d d0       	rcall	.+58     	; 0x33a <spi_transfer_buffer>
	MCP2517_deassertCS();
 300:	3c df       	rcall	.-392    	; 0x17a <MCP2517_deassertCS>
 302:	86 e0       	ldi	r24, 0x06	; 6
	// Enable ECC
	d = 0x01;
	MCP2517_writeReg8(MCP2517_REG_ADDR_ECCCON, d);
	
	// Configuration Done: Select CAN 2.0B Mode - For testing use external loopback
	MCP2517_setMode(MCP2517_CLASSIC_MODE);
 304:	50 df       	rcall	.-352    	; 0x1a6 <MCP2517_setMode>
 306:	8f e3       	ldi	r24, 0x3F	; 63
 308:	9f e1       	ldi	r25, 0x1F	; 31
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <MCP2517_init+0xfa>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <MCP2517_init+0x100>
 310:	00 00       	nop
 312:	61 df       	rcall	.-318    	; 0x1d6 <MCP2517_getMode>
 314:	26 96       	adiw	r28, 0x06	; 6
	_delay_ms(2);
	mode = MCP2517_getMode();
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
	////
	//
	//
	//
	////sei(); // Re-enable interrupts
}
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	ff 90       	pop	r15
 32a:	08 95       	ret

0000032c <spi_init>:
 32c:	66 0f       	add	r22, r22
 32e:	80 65       	ori	r24, 0x50	; 80
 330:	86 2b       	or	r24, r22
	SPDR = data;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
	/* Return any data that was shifted into this register upon transmission  */
	return SPDR;
}
 332:	8c bd       	out	0x2c, r24	; 44
 334:	1d bc       	out	0x2d, r1	; 45
 336:	1e bc       	out	0x2e, r1	; 46
 338:	08 95       	ret

0000033a <spi_transfer_buffer>:

// FULLY WORKING
void spi_transfer_buffer(uint8_t *buf, uint8_t count)
{
	if (count == 0) return;
 33a:	66 23       	and	r22, r22
 33c:	a1 f0       	breq	.+40     	; 0x366 <spi_transfer_buffer+0x2c>
 33e:	fc 01       	movw	r30, r24
 340:	61 50       	subi	r22, 0x01	; 1
 342:	26 2f       	mov	r18, r22
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	2f 5f       	subi	r18, 0xFF	; 255
 348:	3f 4f       	sbci	r19, 0xFF	; 255
 34a:	82 0f       	add	r24, r18
 34c:	93 1f       	adc	r25, r19
 34e:	df 01       	movw	r26, r30
	for(uint8_t i = 0; i < count; i++) {
		uint8_t out = *(buf + i);
 350:	20 81       	ld	r18, Z
		SPDR = out;
 352:	2e bd       	out	0x2e, r18	; 46
		while(!(SPSR & (1<<SPIF)));
 354:	0d b4       	in	r0, 0x2d	; 45
 356:	07 fe       	sbrs	r0, 7
 358:	fd cf       	rjmp	.-6      	; 0x354 <spi_transfer_buffer+0x1a>
		*(buf + i) = SPDR;
 35a:	2e b5       	in	r18, 0x2e	; 46
 35c:	2c 93       	st	X, r18
 35e:	31 96       	adiw	r30, 0x01	; 1

// FULLY WORKING
void spi_transfer_buffer(uint8_t *buf, uint8_t count)
{
	if (count == 0) return;
	for(uint8_t i = 0; i < count; i++) {
 360:	e8 17       	cp	r30, r24
 362:	f9 07       	cpc	r31, r25
 364:	a1 f7       	brne	.-24     	; 0x34e <spi_transfer_buffer+0x14>
 366:	08 95       	ret

00000368 <uart0_init>:

/* All boards use a 16MHz oscillator frequency */
// 
void uart0_init(unsigned int baudRate) {
	/* Set baud rate 19200 */
	UBRR0H = 0; //1001011
 368:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 103; 
 36c:	87 e6       	ldi	r24, 0x67	; 103
 36e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	CLKPR = (1<<CLKPCE);  	//enable clock prescaler change
 372:	e1 e6       	ldi	r30, 0x61	; 97
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 e8       	ldi	r24, 0x80	; 128
 378:	80 83       	st	Z, r24
	CLKPR = 0x00;			//clock divide = 1  so  16MHz/1 = 16MHz
 37a:	10 82       	st	Z, r1
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 37c:	88 e1       	ldi	r24, 0x18	; 24
 37e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 0stop bit */
	UCSR0A = 2;		//2x on
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0C = (3 << UCSZ00);
 388:	86 e0       	ldi	r24, 0x06	; 6
 38a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 38e:	08 95       	ret

00000390 <uart0_transmit>:
}

void uart0_transmit(uint8_t data) {
	/* wait for empty transmit buffer */
	while( !(UCSR0A & (1 << UDRE0)) );
 390:	e0 ec       	ldi	r30, 0xC0	; 192
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	90 81       	ld	r25, Z
 396:	95 ff       	sbrs	r25, 5
 398:	fd cf       	rjmp	.-6      	; 0x394 <uart0_transmit+0x4>
	/* put data into buffer, sends the data */
	UDR0 = data;
 39a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 39e:	08 95       	ret

000003a0 <_exit>:
 3a0:	f8 94       	cli

000003a2 <__stop_program>:
 3a2:	ff cf       	rjmp	.-2      	; 0x3a2 <__stop_program>
